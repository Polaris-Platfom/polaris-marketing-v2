# CI/CD workflow to build and push Docker image, then deploy to remote server via SSH
# Notes:
# - This workflow uses GitHub Container Registry (GHCR). You can switch to Docker Hub if preferred.
# - Configure repository secrets before enabling: GHCR_USERNAME, GHCR_TOKEN, SSH_HOST, SSH_USER, SSH_PRIVATE_KEY
# - The server should have an .env file and will receive infra/docker-compose.prod.yml

name: Deploy Marketing App

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

env:
  # Image name (set to your GHCR namespace explicitly)
  IMAGE_NAME: ghcr.io/oteran92/polaris-marketing:latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME || github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN || github.token }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}
            ghcr.io/oteran92/polaris-marketing:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout (needed for scp of compose file)
        uses: actions/checkout@v4

      - name: Copy compose to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "infra/docker-compose.prod.yml"
          target: "~/polaris-marketing/"
          strip_components: 1

      - name: Deploy on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            set -euxo pipefail
            # Create app directory if not exists (user home)
            mkdir -p ~/polaris-marketing
            cd ~/polaris-marketing

            # Ensure Docker and Compose are present (Debian/Ubuntu)
            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sh
              sudo usermod -aG docker $USER || true
            fi
            if ! docker compose version >/dev/null 2>&1; then
              DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
              mkdir -p $DOCKER_CONFIG/cli-plugins
              curl -SL https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
              chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
            fi

            # Log in to GHCR to pull private images if needed
            echo "${{ secrets.GHCR_TOKEN || github.token }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME || github.repository_owner }}" --password-stdin

            # Create acme storage for Traefik certificates
            mkdir -p ./letsencrypt
            touch ./letsencrypt/acme.json
            chmod 600 ./letsencrypt/acme.json

            # IMPORTANT: Ensure a .env file exists with production values
            if [ ! -f .env ]; then
              echo "Missing .env in ~/polaris-marketing. Aborting." >&2
              exit 1
            fi

            # Pull and start the stack
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d

            # Cleanup old images
            docker image prune -f

 
