# ==============================================
# üöÄ POLARIS MARKETING - CI/CD PIPELINE
# ==============================================
# Independent deployment pipeline for marketing app
# Builds and deploys Docker container to production server

name: Deploy Polaris Marketing

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      deploy_version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        default: ''
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/polaris-platfom/polaris-marketing-standalone

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.meta.outputs.version }}
      sha_short: ${{ steps.meta.outputs.sha_short }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
        
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      run: |
        VERSION=${{ github.event.inputs.deploy_version }}
        if [ -z "$VERSION" ]; then
          VERSION=$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:7}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "sha_short=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
        echo "timestamp=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        labels: |
          org.opencontainers.image.title=Polaris Marketing
          org.opencontainers.image.description=Polaris Platform Marketing Website
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ steps.meta.outputs.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Image scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: success()
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        timeout: 120s
        script: |
          set -e
          
          echo "üöÄ Starting deployment of Polaris Marketing..."
          
          # Navigate to deployment directory
          cd /opt/polaris-marketing || { echo "‚ùå Deployment directory not found"; exit 1; }
          
          # Create backup of current deployment
          if [ -f docker-compose.yml ]; then
            echo "üì¶ Creating backup..."
            sudo docker-compose down --timeout 30 || true
            sudo cp docker-compose.yml docker-compose.yml.backup-$(date +%Y%m%d-%H%M%S) || true
          fi
          
          # Pull the latest image
          echo "üì• Pulling latest image..."
          sudo docker pull ${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }}
          
          # Update image tag in docker-compose
          echo "üîß Updating docker-compose configuration..."
          export IMAGE_TAG=${{ needs.build-and-push.outputs.version }}
          
          # Deploy the new version
          echo "üöÄ Deploying new version..."
          sudo docker-compose up -d --timeout 60
          
          # Health check
          echo "üîç Performing health check..."
          sleep 15
          
          for i in {1..30}; do
            if curl -f http://localhost:3000/api/health; then
              echo "‚úÖ Marketing app is healthy!"
              break
            fi
            echo "‚è≥ Health check attempt $i/30..."
            sleep 10
          done
          
          # Cleanup old images
          echo "üßπ Cleaning up old images..."
          sudo docker image prune -af --filter "until=72h" || true
          
          echo "‚ú® Deployment completed successfully!"
          echo "üìä Deployment summary:"
          echo "  - Version: ${{ needs.build-and-push.outputs.version }}"
          echo "  - SHA: ${{ needs.build-and-push.outputs.sha_short }}"
          echo "  - Time: $(date)"

    - name: Deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful for version ${{ needs.build-and-push.outputs.version }}"
        else
          echo "‚ùå Deployment failed for version ${{ needs.build-and-push.outputs.version }}"
        fi
